<pre class='metadata'>
Title: Conversion Measurement
Shortname: conversion-measurement
Level: 1
Status: CG-DRAFT
Group: wicg
Repository: WICG/conversion-measurement-api
URL: https://wicg.github.io/conversion-measurement-api
Editor: Charlie Harrison, Google Inc. https://google.com, csharrison@chromium.org
Abstract: A new API to measure and attribute cross-site conversions.

Markup Shorthands: markdown on
Complain About: accidental-2119 on, missing-example-ids on
Assume Explicit For: on
</pre>
<pre class=link-defaults>
spec:html; type:element; text:a
</pre>

Introduction {#intro}
=====================

<em>This section is non-normative</em>

This specification describes how web browsers can provide a mechanism to the
web that allows measuring and attributing conversions (e.g. purchases) to ads
a user interacted with on another site. This mechanism should remove one need
for cross site identifiers like third party cookies.

## Overview ## {#overview}

An anchor tag with <{a/impressiondata}> and <{a/conversiondestination}> attributes is
classified as an <dfn export>impression tag</dfn>. When impression tags are clicked, and the
resulting navigation commits in a document matching the <{a/conversiondestination}>,
then the impression is stored in UA storage.

At a later point, the <{a/conversiondestination}> site may fire an HTTP request to
trigger conversion registration, which matches up with any previously
stored impressions. If matching impressions exist, they are scheduled to be
reported at a later time, possibly multiple days in the future.

Reports are sent to reporting endpoints that are configured in impression tags
and conversion registration requests.

# Fetch monkeypatches # {#fetch-monkeypatches}

TODO: Patch into fetch for cancelling requests redirected to the .well-known
conversion domain.

# HTML monkeypatches # {#html-monkeypatches}

Rewrite the anchor element to accept the following attributes:

<pre class="idl">
partial interface HTMLAnchorElement {
    [CEReactions, Reflect] attribute DOMString conversiondestination;
    [CEReactions, Reflect] attribute DOMString impressiondata;
    [CEReactions, Reflect] attribute DOMString reportingorigin;
    [CEReactions, Reflect] attribute unsigned long long impressionexpiry;
};
</pre>

The <dfn for="a" dfn-type="element-attr">conversiondestination</dfn> is the
declared destination [=scheme-and-registrable-domain=] of the anchor for
purposes of conversion measurement

The <dfn for="a" dfn-type="element-attr">impressiondata</dfn> is a string
containing information about the `impression tag` and will be supplied in the
`conversion report`.

The <dfn for="a" dfn-type="element-attr">reportingorigin</dfn> declares the
intended [=origin=] to send the `conversion report` for this impression.

The <dfn for="a" dfn-type="element-attr">impressionexpiry</dfn> is the amount
of time in milliseconds the impression should be considered for conversion
measurement and reporting reporting.


TODO: Need monkey patches passing impression data in navigation, and a mechanism
for validating the resulting document matches the conversiondestination.

# Structures # {#structures}

<h3 dfn-type=dfn>Impression</h3>

An impression is a [=struct=] with the following items:

<ul dfn-for="impression">
: <dfn>impression source</dfn>
:: An [=url/origin=].
: <dfn>impression data</dfn>
:: A [=string=].
: <dfn>conversion destination</dfn>
:: An [=url/origin=].
: <dfn>reporting endpoint</dfn>
:: An [=url/origin=].
: <dfn>expiry</dfn>
:: A point in time.
: <dfn>impression time</dfn>
:: A point in time.

</ul>

<h3 dfn-type=dfn>Conversion</h3>

A conversion is a [=struct=] with the following items:

<ul dfn-for="conversion">
: <dfn>conversion source</dfn>
:: An [=url/origin=].
: <dfn>conversion data</dfn>
:: A [=string=].
: <dfn>conversion time</dfn>
:: A point in time.

</ul>

<h3 dfn-type=dfn>Conversion report</h3>

A conversion report is a [=struct=] with the following items:

<ul dfn-for="conversion report">
: <dfn>impression data</dfn>
:: A [=string=].
: <dfn>conversion data</dfn>
:: A [=string=].
: <dfn>attribution credit</dfn>
:: An integer in the range [0, 100].

</ul>

# Algorithms # {#algorithms}

<h3 algorithm id="creating-impression">Activating an impression</h3>

To <dfn>activate an impression</dfn> from an <{a}> tag,
create a new [=impression=] struct whose items are:

: [=impression/impression source=]
:: The current top frame's [=origin=].
: [=impression/impression data=]
:: The result of applying [=parsing conversion data=] to the <{a/impressiondata}>
    attribute.
: [=impression/conversion destination=]
:: The result of parsing <{a/conversiondestination}> as a site.
: [=impression/reporting endpoint=]
:: The result of [=origin/obtaining a site=] from the result of parsing
    <{a/reportingorigin}> as an origin.
: [=impression/expiry=]
:: Be a timestamp <{a/impressionexpiry}> milliseconds in the future.
: [=impression/impression time=]
:: Be the current time.

TODO: How to store the impression

<h3 algorithm id="creating-a-conversion">Creating a conversion</h3>

To <dfn>create a conversion</dfn> from a [=url=]:

: [=conversion/conversion source=]
:: The current top-level origin.
: [=conversion/conversion data=]
:: The result of applying [=parsing conversion data=] to the value associated with the
    |conversion-data| field in the URL's query part.
: [=conversion/conversion time=]
:: Be the current time.

TODO: Formalize how to parse the query similar to URLSearchParams.

<h3 algorithm id="register-conversion">Register a conversion</h3>

To <dfn>register a conversion</dfn> from a fetch [=request=], run the following steps:

1. If the requests [=request/current url's=] [=url/path=] is not `.well-known/register-conversion`,
    return.
1. If the request's [=request/redirect count=] is less than 1, return.
1. Let |conversionToRegister| be the result of applying [=create a conversion=] from the
    request's [=request/current url=].

TODO: How to store the conversion

<h3 algorithm id="parsing-data">Parsing data fields</h3>

This section defines how to parse and extract both
[=impression/impression data=] and [=conversion/conversion data=] from a
[=string=] |input| and a unsigned long long |maxData|.

<dfn>Parsing conversion data</dfn> from |input| with |maxData| returns the result of
the following steps:

1. Let |decodedInput| be the result of decoding |input| as a base-16 integer.
1. Let |clampedDecodedInput| be the remainder when dividing |decodedInput| by
    |maxData|.
1. Let |encodedOutput| be the result of encoding |clampedDecodedInput| as a
    base 16 encoding.
1. Return |encodedOutput|.

<h3 algorithm id="delivery-time">Establishing report delivery time</h3>
To <dfn>establish report delivery time</dfn> given an [=impression=] and a
[=conversion/conversion time=], run the following steps:
1. Let |timeDelta| be the difference between the [=conversion/conversion time=] and [=impression/impression time=].
2. Let |expiryDelta| be the difference between the [=impression/expiry=] and the [=impression/impression time=]
1. If |timeDelta| <= (2 days - 1 hour), return [=impression/impression time=] + 2 days
1. If
    - |expiryDelta| > (2 days - 1 hour) and
    - |expiryDelta| < (7 days - 1 hour) and
    - |timeDelta| <= |expiryDelta|


    return the [=impression/expiry=] + 1 hour.
1. If |timeDelta| <= (7 days - 1 hour), return [=impression/impression time=] + 7 days
1. return the [=impression/expiry=] + 1 hour.

<h3 algorithm id="queuing-report">Queuing a conversion report</h3>
TODO

<h3 algorithm id="attribution-credit">Establishing attribution credit</h3>
TODO

# Security consideration # {#security-considerations}
TODO

# Privacy consideration # {#privacy-considerations}
TODO
